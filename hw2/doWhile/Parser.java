/* Generated By:JavaCC: Do not edit this line. Parser.java */
public class Parser implements ParserConstants {
  public static void main(String args[]) throws ParseException {
      new Parser(System.in);  // Read from standard input
      Stmt p = stmts();
      System.out.println("Complete program is:");
      p.print(4);
      new StaticAnalysis().run(p);
      System.out.println("Passes static analysis!");
  }

//-- Define the grammatical rules for statements: ----------------------------
  static final public Stmt stmts() throws ParseException {
                 Stmt s1, s2;
    // one or more statements:
      s1 = stmt();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 5:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 16:
    case 31:
    case 32:
    case IDENT:
      s2 = stmts();
                           s1=new Seq(s1,s2);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    {if (true) return s1;}
    throw new Error("Missing return statement in function");
  }

  static final public Stmt block() throws ParseException {
                 Stmt s1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 1:
      jj_consume_token(1);
      s1 = stmts();
      jj_consume_token(2);
      break;
    case 5:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 16:
    case 31:
    case 32:
    case IDENT:
      s1 = stmt();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                     {if (true) return s1;}
    throw new Error("Missing return statement in function");
  }

  static final public Stmt stmt() throws ParseException {
                Token t, v; Expr e; Stmt s1, s2; Expr[] a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      t = jj_consume_token(IDENT);
      jj_consume_token(3);
      e = expr();
      jj_consume_token(4);
    {if (true) return new Assign(t.image, e);}
      break;
    case 5:
      jj_consume_token(5);
      jj_consume_token(6);
      e = expr();
      jj_consume_token(7);
      s1 = block();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 8:
        jj_consume_token(8);
        s2 = block();
                          {if (true) return new If(e, s1, s2);}
        break;
      default:
        jj_la1[2] = jj_gen;
                          {if (true) return new If(e, s1, null);}
      }
      break;
    case 9:
      jj_consume_token(9);
      jj_consume_token(6);
      e = expr();
      jj_consume_token(7);
      s1 = block();
     {if (true) return new While(e, s1);}
      break;
    case 10:
      jj_consume_token(10);
      e = expr();
      jj_consume_token(4);
     {if (true) return new Print(e);}
      break;
    case 11:
      jj_consume_token(11);
      e = expr();
      jj_consume_token(4);
     {if (true) return new Return(e);}
      break;
    case 31:
    case 32:
      s1 = varDecl();
     {if (true) return s1;}
      break;
    case 12:
      jj_consume_token(12);
      s1 = block();
      jj_consume_token(9);
      jj_consume_token(6);
      e = expr();
      jj_consume_token(7);
      jj_consume_token(4);
     {if (true) return new DoWhile(s1, e);}
      break;
    case 13:
      jj_consume_token(13);
      jj_consume_token(4);
     {if (true) return new Break();}
      break;
    case 14:
      jj_consume_token(14);
      jj_consume_token(4);
     {if (true) return new Continue();}
      break;
    case 16:
      s1 = switchStmt();
     {if (true) return s1;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public VarDecl varDecl() throws ParseException {
                      Type ty; VarIntro[] vars;
    ty = type();
    vars = varIntros(0);
    jj_consume_token(4);
    {if (true) return new VarDecl(ty, vars);}
    throw new Error("Missing return statement in function");
  }

  static final public VarIntro[] varIntros(int soFar) throws ParseException {
                                    VarIntro var; VarIntro[] vars;
    var = varIntro();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      jj_consume_token(15);
      vars = varIntros(soFar+1);
      break;
    default:
      jj_la1[4] = jj_gen;
                      vars=new VarIntro[soFar+1];
    }
    vars[soFar] = var; {if (true) return vars;}
    throw new Error("Missing return statement in function");
  }

  static final public VarIntro varIntro() throws ParseException {
                        Token t; Expr e;
    t = jj_consume_token(IDENT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 3:
      jj_consume_token(3);
      e = expr();
                            {if (true) return new InitVarIntro(t.image, e);}
      break;
    default:
      jj_la1[5] = jj_gen;
                {if (true) return new VarIntro(t.image);}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Stmt switchStmt() throws ParseException {
                      Expr e; Case[] cs;
    jj_consume_token(16);
    jj_consume_token(6);
    e = expr();
    jj_consume_token(7);
    jj_consume_token(1);
    cs = cases(0);
    jj_consume_token(2);
    {if (true) return new Switch(e, cs);}
    throw new Error("Missing return statement in function");
  }

  static final public Case[] cases(int soFar) throws ParseException {
                            Case c; Case[] cases; Stmt s=null; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
    case 19:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
        jj_consume_token(17);
        jj_consume_token(18);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 5:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 16:
        case 31:
        case 32:
        case IDENT:
          s = stmts();
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        c = new DefaultCase(s);
        break;
      case 19:
        jj_consume_token(19);
        t = jj_consume_token(INTLIT);
        jj_consume_token(18);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 5:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 16:
        case 31:
        case 32:
        case IDENT:
          s = stmts();
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        c = new NumCase(Integer.parseInt(t.image), s);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      cases = cases(soFar+1);
      cases[soFar] = c; {if (true) return cases;}
      break;
    default:
      jj_la1[9] = jj_gen;
      {if (true) return new Case[soFar];}
    }
    throw new Error("Missing return statement in function");
  }

//-- Define the grammatical rules for expressions: ---------------------------
  static final public Expr expr() throws ParseException {
                Expr e;
    e = lor();
              {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr lor() throws ParseException {
               Expr n, m;
    n = land();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 20:
      jj_consume_token(20);
      m = lor();
                           n = new LOr(n, m);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr land() throws ParseException {
                Expr n, m;
    n = rel();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 21:
      jj_consume_token(21);
      m = land();
                           n = new LAnd(n, m);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr rel() throws ParseException {
               Expr m, n;
    n = term();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 22:
      case 23:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 22:
        jj_consume_token(22);
        m = term();
                              n = new LT(n,m);
        break;
      case 23:
        jj_consume_token(23);
        m = term();
                              n = new EqEq(n,m);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr term() throws ParseException {
                Expr m, n;
    n = factor();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
      case 25:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
        jj_consume_token(24);
        m = factor();
                                 n = new Plus(n,m);
        break;
      case 25:
        jj_consume_token(25);
        m = factor();
                                 n = new Minus(n,m);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr factor() throws ParseException {
                  Expr m, n;
    n = primary();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 26:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_3;
      }
      jj_consume_token(26);
      m = primary();
                                   n = new Mult(n,m);
    }
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr primary() throws ParseException {
                   Expr e; Expr idx;
    e = atom();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_4;
      }
      jj_consume_token(27);
      idx = expr();
      jj_consume_token(28);
                                 e = new Nth(e, idx);
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr atom() throws ParseException {
                Expr e; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 6:
      jj_consume_token(6);
      e = expr();
      jj_consume_token(7);
                      {if (true) return e;}
      break;
    case INTLIT:
      t = jj_consume_token(INTLIT);
                      {if (true) return new Int(Integer.parseInt(t.image));}
      break;
    case 29:
      jj_consume_token(29);
                      {if (true) return new Bool(true);}
      break;
    case 30:
      jj_consume_token(30);
                      {if (true) return new Bool(false);}
      break;
    case IDENT:
      t = jj_consume_token(IDENT);
                      {if (true) return new Var(t.image);}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//-- Define the grammatical rules for types: ---------------------------------
  static final public Type type() throws ParseException {
                Type t;
    t = atype();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_5;
      }
      jj_consume_token(27);
      jj_consume_token(28);
            t = new ArrayType(t);
    }
   {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public Type atype() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      jj_consume_token(31);
              {if (true) return Type.INT;}
      break;
    case 32:
      jj_consume_token(32);
              {if (true) return Type.BOOLEAN;}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80017e20,0x80017e22,0x100,0x80017e20,0x8000,0x8,0x80017e20,0x80017e20,0xa0000,0xa0000,0x100000,0x200000,0xc00000,0xc00000,0x3000000,0x3000000,0x4000000,0x8000000,0x60000040,0x8000000,0x80000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x801,0x801,0x0,0x801,0x0,0x0,0x801,0x801,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x880,0x0,0x1,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[44];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 21; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
