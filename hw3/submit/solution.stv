/*
 ** I have reverse engineered this program from the assembly file
 ** provided to me. Verified by a 'diff' command, there are no
 ** differences in the generated assembly besides the file name
 ** in the first line.
*/

/*
 ** Indiscernible Differences:

 ** 1. The global variable 'thu' could be an boolean or an int.
 **    The only way to tell(that I can think of) is if some 
 **    instruction which used 'thu' were expecting a certain type.
 **    Alas, thu is unused and we will never know.

 ** 2. Local variable names.

 ** 3. Number of arguments to the unused function 'draw()'. Some
 **    of the current args are unused in the assembly, and there 
       is no call to the function in the program, so for all we know
 **    there could be any reasonable number of args.

 ** 4. Comments. Impossible to say if there were any or what 
 **    they were.

 ** 5. Names of the formal args in the source code.

 ** 6. The Types of any potential unused arguments to functions.
*/

//xinitGlobals:
int nicks = 10;
int que   = 73*2;
int thu   = 0;
boolean x = false;

void main() {
  //l1
  while (nicks == que) {
    //jz l0
    que = que - 24601; 
    print que;
  }
  print ((nicks + 1)-23);
  print horn(6*que, 4);
}

int maze(int z) {
  if (z==3) {
    return nicks*z;
  } else {
    return maze(z-12);
  }
}

//use all 'argument' registers + one more(g)
boolean draw(int a, int b, int c, int d, int e, int f, int g) {

  int temp = (d-e)+5+a;
  // 'orl'
  if (x) {
    print 978457164;
  }
    //need g to force a '16(%rbp)' access.
    //reason: 6 arg regs; g is num 7,
    //therefore g is explicitly stored on the stack
    int temp2 = (b+b)+g;
    return temp2 == temp;
}

int horn(int a, int y) {
  int retVal = que*y;
  return maze(99*retVal);
}
