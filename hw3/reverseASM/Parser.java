/* Generated By:JavaCC: Do not edit this line. Parser.java */
public class Parser implements ParserConstants {
  public static void main(String args[]) throws ParseException {
    new Parser(System.in);  // Read from standard input
    Defn[] program = Top();
    System.out.println("Complete program is:");
    Defn.print(4, program);
    new StaticAnalysis().run(program);
    System.out.println("Passes static analysis!");
  }

//-- Define the grammatical rules for programs: ------------------------------

// Complete programs comprise a sequence of zero or more definitions.
// (One could quibble with the decision to include programs that contain
// no definitions: how useful could such programs be in practice?  But
// static analysis will deal with this indirectly by insisting that every
// program contains a main function ...)
  static final public Defn[] Top() throws ParseException {
                Defn[] program;
    program = defns(0);
    jj_consume_token(0);
    {if (true) return program;}
    throw new Error("Missing return statement in function");
  }

  static final public Defn[] defns(int soFar) throws ParseException {
                           Defn d; Defn[] program;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 4:
    case 33:
    case 34:
      d = defn();
      program = defns(soFar+1);
      program[soFar] = d; {if (true) return program;}
      break;
    default:
      jj_la1[0] = jj_gen;
      {if (true) return new Defn[soFar];}
    }
    throw new Error("Missing return statement in function");
  }

// We have relied on a function called defn() to parse a single
// definition, which could be either a global variable definition or a
// function definition.  This can be coded easily enough as a simple
// alternative, although we will require a LOOKAHEAD(3) because we need
// to consider three tokens to distinguish between a variable definition
// like "int x=...;" and a function definition like "int x(...) ...".
  static final public Defn defn() throws ParseException {
               Defn d;
    if (jj_2_1(3)) {
      d = globals();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 4:
      case 33:
      case 34:
        d = function();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

// Global variable declarations are very easy to parse now, comprising a
// type followed by a sequence of variable introductions:
  static final public Defn globals() throws ParseException {
                  Type t; VarIntro[] vs;
    t = type();
    vs = varIntros(0);
    jj_consume_token(1);
    {if (true) return new Globals(t, vs);}
    throw new Error("Missing return statement in function");
  }

// Function defintions begin with the return type (or "void" for any
// function that does not return a result), followed by the function
// name and a list of formal parameters.  The last component of a
// function definition is the body, which should be a statement block:
  static final public Defn function() throws ParseException {
                   Type t; Token t1; Formal[] formals; Stmt body;
    t = retType();
    t1 = jj_consume_token(IDENT);
    jj_consume_token(2);
    formals = formals();
    jj_consume_token(3);
    body = block();
    {if (true) return new Function(t, t1.image, formals, body);}
    throw new Error("Missing return statement in function");
  }

// Parse a return type (which could be void):
  static final public Type retType() throws ParseException {
                  Type t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
    case 34:
      t = type();
      break;
    case 4:
      jj_consume_token(4);
             t = null;
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

// Parse a list of zero or more formal parameters:
  static final public Formal[] formals() throws ParseException {
                      Formal[] formals;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
    case 34:
      formals = formals1(0);
      break;
    default:
      jj_la1[3] = jj_gen;
                            formals=new Formal[0];
    }
    {if (true) return formals;}
    throw new Error("Missing return statement in function");
  }

// Parse a list of one or more comma-separated variable introductions:
  static final public Formal[] formals1(int soFar) throws ParseException {
                                Formal f; Formal[] formals;
    f = formal();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 5:
      jj_consume_token(5);
      formals = formals1(soFar+1);

      break;
    default:
      jj_la1[4] = jj_gen;
                 formals = new Formal[soFar+1];
    }
    formals[soFar] = f; {if (true) return formals;}
    throw new Error("Missing return statement in function");
  }

// Parse a single formal parameter:
  static final public Formal formal() throws ParseException {
                   Type t; Token t1;
    t = type();
    t1 = jj_consume_token(IDENT);
    {if (true) return new Formal(t, t1.image);}
    throw new Error("Missing return statement in function");
  }

//-- Define the grammatical rules for statements: ----------------------------
  static final public Stmt stmts() throws ParseException {
                 Stmt s1, s2;
    // one or more statements:
      s1 = stmt();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 21:
    case 33:
    case 34:
    case IDENT:
      s2 = stmts();
                           s1=new Seq(s1,s2);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    {if (true) return s1;}
    throw new Error("Missing return statement in function");
  }

  static final public Stmt block() throws ParseException {
                 Stmt s1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 6:
      jj_consume_token(6);
      s1 = stmts();
      jj_consume_token(7);
      break;
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 21:
    case 33:
    case 34:
    case IDENT:
      s1 = stmt();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                     {if (true) return s1;}
    throw new Error("Missing return statement in function");
  }

  static final public Stmt stmt() throws ParseException {
                Token t, v; Expr e; Stmt s1, s2; Expr[] a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      s1 = exprStmt();
    {if (true) return s1;}
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(2);
      e = expr();
      jj_consume_token(3);
      s1 = block();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        jj_consume_token(9);
        s2 = block();
                          {if (true) return new If(e, s1, s2);}
        break;
      default:
        jj_la1[7] = jj_gen;
                          {if (true) return new If(e, s1, null);}
      }
      break;
    case 10:
      jj_consume_token(10);
      jj_consume_token(2);
      e = expr();
      jj_consume_token(3);
      s1 = block();
     {if (true) return new While(e, s1);}
      break;
    case 11:
      jj_consume_token(11);
      e = expr();
      jj_consume_token(1);
     {if (true) return new Print(e);}
      break;
    case 12:
      jj_consume_token(12);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 31:
      case 32:
      case INTLIT:
      case IDENT:
        e = expr();
        break;
      default:
        jj_la1[8] = jj_gen;
                        e=null;
      }
      jj_consume_token(1);
     {if (true) return new Return(e);}
      break;
    case 33:
    case 34:
      s1 = varDecl();
     {if (true) return s1;}
      break;
    case 13:
      jj_consume_token(13);
      s1 = block();
      jj_consume_token(10);
      jj_consume_token(2);
      e = expr();
      jj_consume_token(3);
      jj_consume_token(1);
     {if (true) return new DoWhile(s1, e);}
      break;
    case 14:
      jj_consume_token(14);
      jj_consume_token(1);
     {if (true) return new Break();}
      break;
    case 15:
      jj_consume_token(15);
      jj_consume_token(1);
     {if (true) return new Continue();}
      break;
    case 17:
      s1 = switchStmt();
     {if (true) return s1;}
      break;
    case 21:
      s1 = forLoop();
     {if (true) return s1;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public VarDecl varDecl() throws ParseException {
                      Type ty; VarIntro[] vars;
    ty = type();
    vars = varIntros(0);
    jj_consume_token(1);
    {if (true) return new VarDecl(ty, vars);}
    throw new Error("Missing return statement in function");
  }

  static final public VarIntro[] varIntros(int soFar) throws ParseException {
                                    VarIntro var; VarIntro[] vars;
    var = varIntro();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 5:
      jj_consume_token(5);
      vars = varIntros(soFar+1);
      break;
    default:
      jj_la1[10] = jj_gen;
                      vars=new VarIntro[soFar+1];
    }
    vars[soFar] = var; {if (true) return vars;}
    throw new Error("Missing return statement in function");
  }

  static final public VarIntro varIntro() throws ParseException {
                        Token t; Expr e;
    t = jj_consume_token(IDENT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 16:
      jj_consume_token(16);
      e = expr();
                            {if (true) return new InitVarIntro(t.image, e);}
      break;
    default:
      jj_la1[11] = jj_gen;
                {if (true) return new VarIntro(t.image);}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Stmt switchStmt() throws ParseException {
                      Expr e; Case[] cs;
    jj_consume_token(17);
    jj_consume_token(2);
    e = expr();
    jj_consume_token(3);
    jj_consume_token(6);
    cs = cases(0);
    jj_consume_token(7);
    {if (true) return new Switch(e, cs);}
    throw new Error("Missing return statement in function");
  }

  static final public Case[] cases(int soFar) throws ParseException {
                            Case c; Case[] cases; Stmt s=null; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
    case 20:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
        jj_consume_token(18);
        jj_consume_token(19);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 8:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 17:
        case 21:
        case 33:
        case 34:
        case IDENT:
          s = stmts();
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        c = new DefaultCase(s);
        break;
      case 20:
        jj_consume_token(20);
        t = jj_consume_token(INTLIT);
        jj_consume_token(19);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 8:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 17:
        case 21:
        case 33:
        case 34:
        case IDENT:
          s = stmts();
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        c = new NumCase(Integer.parseInt(t.image), s);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      cases = cases(soFar+1);
      cases[soFar] = c; {if (true) return cases;}
      break;
    default:
      jj_la1[15] = jj_gen;
      {if (true) return new Case[soFar];}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ExprStmt exprStmt() throws ParseException {
                        StmtExpr e;
    e = stmtExpr();
    jj_consume_token(1);
                     {if (true) return new ExprStmt(e);}
    throw new Error("Missing return statement in function");
  }

  static final public Stmt forLoop() throws ParseException {
                  StmtExpr init, step; Expr test; Stmt body;
    jj_consume_token(21);
    jj_consume_token(2);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      init = stmtExpr();
      break;
    default:
      jj_la1[16] = jj_gen;
                                init=null;
    }
    jj_consume_token(1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 2:
    case 31:
    case 32:
    case INTLIT:
    case IDENT:
      test = expr();
      break;
    default:
      jj_la1[17] = jj_gen;
                                test=null;
    }
    jj_consume_token(1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      step = stmtExpr();
      break;
    default:
      jj_la1[18] = jj_gen;
                                step=null;
    }
    jj_consume_token(3);
    body = block();
    {if (true) return new For(init, test, step, body);}
    throw new Error("Missing return statement in function");
  }

//-- Define the grammatical rules for expressions: ---------------------------
  static final public Expr expr() throws ParseException {
                Expr e;
    if (jj_2_2(2)) {
      e = assign();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 31:
      case 32:
      case INTLIT:
      case IDENT:
        e = lor();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                                        {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr lor() throws ParseException {
               Expr n, m;
    n = land();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 22:
      jj_consume_token(22);
      m = lor();
                           n = new LOr(n, m);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr land() throws ParseException {
                Expr n, m;
    n = rel();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 23:
      jj_consume_token(23);
      m = land();
                           n = new LAnd(n, m);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr rel() throws ParseException {
               Expr m, n;
    n = term();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
      case 25:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
        jj_consume_token(24);
        m = term();
                              n = new LT(n,m);
        break;
      case 25:
        jj_consume_token(25);
        m = term();
                              n = new EqEq(n,m);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr term() throws ParseException {
                Expr m, n;
    n = factor();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 26:
      case 27:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 26:
        jj_consume_token(26);
        m = factor();
                                 n = new Plus(n,m);
        break;
      case 27:
        jj_consume_token(27);
        m = factor();
                                 n = new Minus(n,m);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr factor() throws ParseException {
                  Expr m, n;
    n = primary();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 28:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_3;
      }
      jj_consume_token(28);
      m = primary();
                                   n = new Mult(n,m);
    }
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr primary() throws ParseException {
                   Expr e; Expr idx;
    e = atom();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 29:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_4;
      }
      jj_consume_token(29);
      idx = expr();
      jj_consume_token(30);
                                 e = new Nth(e, idx);
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr atom() throws ParseException {
                Expr e; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 2:
      jj_consume_token(2);
      e = expr();
      jj_consume_token(3);
                      {if (true) return e;}
      break;
    case INTLIT:
      t = jj_consume_token(INTLIT);
                      {if (true) return new Int(Integer.parseInt(t.image));}
      break;
    case 31:
      jj_consume_token(31);
                      {if (true) return new Bool(true);}
      break;
    case 32:
      jj_consume_token(32);
                      {if (true) return new Bool(false);}
      break;
    default:
      jj_la1[28] = jj_gen;
      if (jj_2_3(2)) {
        e = call();
                      {if (true) return e;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          t = jj_consume_token(IDENT);
                      {if (true) return new Var(t.image);}
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public StmtExpr stmtExpr() throws ParseException {
                        StmtExpr e;
    if (jj_2_4(2)) {
      e = assign();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        e = call();
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                                         {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Assign assign() throws ParseException {
                   Token t; Expr e;
    t = jj_consume_token(IDENT);
    jj_consume_token(16);
    e = expr();
    {if (true) return new Assign(t.image, e);}
    throw new Error("Missing return statement in function");
  }

  static final public Call call() throws ParseException {
               Token t; Expr[] args;
    t = jj_consume_token(IDENT);
    jj_consume_token(2);
    args = args();
    jj_consume_token(3);
    {if (true) return new Call(t.image, args);}
    throw new Error("Missing return statement in function");
  }

  static final public Expr[] args() throws ParseException {
                 Expr[] args;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 2:
    case 31:
    case 32:
    case INTLIT:
    case IDENT:
      args = args1(0);
      break;
    default:
      jj_la1[31] = jj_gen;
                      args=new Expr[0];
    }
    {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr[] args1(int soFar) throws ParseException {
                           Expr e; Expr[] args;
    e = expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 5:
      jj_consume_token(5);
      args = args1(soFar+1);

      break;
    default:
      jj_la1[32] = jj_gen;
               args = new Expr[soFar+1];
    }
    args[soFar] = e; {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

//-- Define the grammatical rules for types: ---------------------------------
  static final public Type type() throws ParseException {
                Type t;
    t = atype();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 29:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_5;
      }
      jj_consume_token(29);
      jj_consume_token(30);
            t = new ArrayType(t);
    }
   {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public Type atype() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
      jj_consume_token(33);
              {if (true) return Type.INT;}
      break;
    case 34:
      jj_consume_token(34);
              {if (true) return Type.BOOLEAN;}
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(34)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(33)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    return false;
  }

  static private boolean jj_3R_15() {
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(29)) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(16)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_11()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(5)) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_3R_9()) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(1)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(IDENT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_3R_13()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(2)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(16)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[35];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10,0x10,0x10,0x0,0x20,0x22fd00,0x22fd40,0x200,0x80000004,0x22fd00,0x20,0x10000,0x22fd00,0x22fd00,0x140000,0x140000,0x0,0x80000004,0x0,0x80000004,0x400000,0x800000,0x3000000,0x3000000,0xc000000,0xc000000,0x10000000,0x20000000,0x80000004,0x0,0x0,0x80000004,0x20,0x20000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x6,0x6,0x6,0x6,0x0,0x2006,0x2006,0x0,0x2201,0x2006,0x0,0x0,0x2006,0x2006,0x0,0x0,0x2000,0x2201,0x2000,0x2201,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x201,0x2000,0x2000,0x2201,0x0,0x0,0x6,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[4];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 35; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
